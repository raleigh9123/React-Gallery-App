{"version":3,"sources":["components/SearchForm.js","components/Nav.js","components/Photo.js","components/NotFound.js","components/PhotoContainer.js","config.js","App.js","serviceWorker.js","index.js"],"names":["SearchForm","handleSubmit","e","preventDefault","searchInput","search","value","path","props","onSearch","history","push","className","onSubmit","this","type","name","placeholder","required","ref","input","fill","height","viewBox","width","xmlns","d","Component","NavMenu","to","Photo","id","secret","farmID","serverID","title","src","alt","NotFound","query","PhotoContainer","data","useParams","dataObject","photos","map","image","farm","server","key","photosExist","length","apiKey","App","state","images","beach","mountain","desert","requestFlickrURLs","axios","get","then","response","setState","prevState","photo","catch","error","console","log","currentURLQuery","location","pathname","slice","render","component","Nav","exact","Boolean","window","hostname","match","ReactDOM","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.ef428a87.chunk.js","sourcesContent":["import React, {Component} from 'react';\n\nclass SearchForm extends Component {\n\n\n    //Event Handler for form submission. 1. prevent page refresh 2. t\n    handleSubmit = (e) => {\n        //Prevent page refresh\n        e.preventDefault();\n        //Take value from the ref attribute in input element and declare new url query as path\n        let searchInput = this.search.value;\n        let path = `/${searchInput}`\n        //Perform Flickr search with OnSearch prop passing the value into search\n        this.props.onSearch(searchInput)\n        //Clear input field\n        searchInput = ''\n        //Redirect page by pushing url path into history, thereby directing user to new query\n        this.props.history.push(path)\n    }\n    \n    render() {\n        return (\n            <form className=\"search-form\" onSubmit={this.handleSubmit}>\n                <input type=\"search\" name=\"search\" placeholder=\"Search\" required ref={(input)=> {this.search=input}}/>\n                <button type=\"submit\" className=\"search-button\">\n                <svg fill=\"#fff\" height=\"24\" viewBox=\"0 0 23 23\" width=\"24\" xmlns=\"http://www.w3.org/2000/svg\">\n                    <path d=\"M15.5 14h-.79l-.28-.27C15.41 12.59 16 11.11 16 9.5 16 5.91 13.09 3 9.5 3S3 5.91 3 9.5 5.91 16 9.5 16c1.61 0 3.09-.59 4.23-1.57l.27.28v.79l5 4.99L20.49 19l-4.99-5zm-6 0C7.01 14 5 11.99 5 9.5S7.01 5 9.5 5 14 7.01 14 9.5 11.99 14 9.5 14z\"/>\n                    <path d=\"M0 0h24v24H0z\" fill=\"none\"/>\n                </svg>\n                </button>\n            </form>\n        )\n    }\n}\n\nexport default SearchForm;","import React from 'react';\nimport {NavLink} from 'react-router-dom';\n\nconst NavMenu = () => {\n    return (\n        <nav className=\"main-nav\">\n            <ul>\n            <li><NavLink to='/beach'>Beach</NavLink></li>\n            <li><NavLink to='/mountain'>Mountain</NavLink></li>\n            <li><NavLink to='/desert'>Desert</NavLink></li>\n            </ul>\n        </nav>\n    )\n}\n\nexport default NavMenu;","import React from 'react'\n\nconst Photo = ({id, secret, farmID, serverID, title}) => {\n\n    return (\n        <li>\n            <img src={`https://farm${farmID}.staticflickr.com/${serverID}/${id}_${secret}.jpg`} alt={title} />\n        </li>\n    )\n}\n\nexport default Photo;","import React from 'react';\n\nconst NotFound = ({query}) => {\n    return (\n        <li className=\"not-found\">\n            <h3>No Results Found for {query} </h3>\n            <p>You search did not return any results. Please try again.</p>\n        </li>\n    )\n}\n\nexport default NotFound;","import React from 'react';\nimport Photo from './Photo';\nimport NotFound from './NotFound';\nimport {useParams} from 'react-router-dom';\n\nconst PhotoContainer = ({data}) => {\n\n    //Take search parameters from the URL and pass string into the data object to return queried object\n    let {search} = useParams();\n    if(search === 'React-Gallery-App') {\n      search = 'mountain';\n    }\n    let dataObject = data[`${search}`]\n\n    //Declare photos variable. .map() over the object and return photo components for each image in object.\n    let photos='';\n    if(dataObject) {\n        let photosMap = dataObject.map(image => <Photo id={image.id} farmID={image.farm} serverID={image.server} secret={image.secret} title={image.title} key={image.id}/>)\n        photos = photosMap;\n    }\n    //Determine if photos exist. If not, will return value '0'\n    let photosExist = photos.length;\n\n    //If photos exist, load header text for query, else header will produce 'loading...'\n    //If photos exist, render the photos, else render Not Found component\n    return (\n        <div className=\"photo-container\">\n                <h2>{photosExist ? search : 'Loading...'}</h2>\n                <ul>\n                    {photosExist ? photos : <NotFound query={search}/>}\n                </ul>\n        </div>\n    );\n};\n\nexport default PhotoContainer;\n","const apiKey = 'f0752e54bb7dbe3511f602591554b944';\n\nexport default apiKey;","//Project Dependencies\nimport React, {Component} from 'react';\nimport './App.css';\nimport {\n  Route,\n  Redirect,\n  Switch\n} from 'react-router-dom';\nimport axios from 'axios';\n\n\n//App Components\nimport SearchForm from './components/SearchForm';\nimport Nav from './components/Nav';\nimport PhotoContainer from './components/PhotoContainer';\n\n//Flickr API\nimport apiKey from './config';\n\n\nclass App extends Component {\n\n  //State is declared with image objects as empty arrays\n  state = {\n    images: {\n      beach:[],\n      mountain:[],\n      desert:[]\n    },\n  }\n\n  //When App component mounts, request data for 3 presets\n  componentDidMount() {\n    this.requestFlickrURLs('beach');\n    this.requestFlickrURLs('mountain');\n    this.requestFlickrURLs('desert');\n\n    //If not on the homepage already, take the url parameter and make Flickr request\n    let currentURLQuery = this.props.location.pathname.slice(1);\n    if(currentURLQuery) {\n      this.requestFlickrURLs(currentURLQuery)\n    }    \n  }\n\n  //Use Axios to get image data for the query. Query comes from URL or from user search\n  requestFlickrURLs = (query) => {\n    axios.get(`https://www.flickr.com/services/rest/?method=flickr.photos.search&api_key=${apiKey}&tags=${query}&per_page=24&format=json&nojsoncallback=1&sort=relevance`)\n      .then( response => {\n        //Make sure Flickr returns a real response\n        if(typeof response.data === 'object') {\n          this.setState(prevState => {\n            return {\n              images: {\n                ...prevState.images,\n                [query]: response.data.photos.photo\n              },\n            }\n          })\n        }\n    })\n      .catch(function (error) {\n        // handle error\n        console.log(error);\n    });\n  }\n\n  render() {\n    \n    return (\n        <div className=\"container\">\n\n          {/* * *\n          * Entire App is wrapped in Browser Router in the index.js main file.\n          * Load search form passing flickr request function in as props. Load nav component. \n          * When app loads or if url path is blank, redirect to \"/beaches\". Otherwise, redirect to custom search query  \n          * * */}\n          <Route path=\"/\" render={(props) => <SearchForm {...props} onSearch={this.requestFlickrURLs} />} />\n          <Route path=\"/\" component={Nav} />\n          <Switch>\n            <Route exact path =\"/\">\n              <Redirect to=\"/beach\" />\n            </Route>\n            <Route path=\"/:search\" render={ () => <PhotoContainer data={this.state.images} /> } />\n          </Switch>\n\n        </div>\n    );\n  }\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport {BrowserRouter, Route} from 'react-router-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\n//BrowserRouter declared in render method allows URL parameter to be checked and initial page load to occur by allowing the App component to have a Router Consumer/Provider\nReactDOM.render(\n    <BrowserRouter>\n        <Route path=\"/\" component={App} />\n    </BrowserRouter>,\n    document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}