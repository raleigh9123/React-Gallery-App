{"ast":null,"code":"var _jsxFileName = \"/Users/joseph/Documents/GitHub/React-Gallery/src/components/PhotoContainer.js\";\nimport React from 'react';\nimport Photo from './Photo';\nimport NotFound from './NotFound';\nimport { useParams } from 'react-router-dom';\n\nconst PhotoContainer = ({\n  data\n}) => {\n  //Take search parameters from the URL and pass string into the data object to return queried object\n  let {\n    search\n  } = useParams();\n  let dataObject = data[`${search}`]; //Declare photos variable. .map() over the object and return photo components for each image in object.\n\n  let photos = '';\n\n  if (dataObject) {\n    let photosMap = dataObject.map(image => React.createElement(Photo, {\n      id: image.id,\n      farmID: image.farm,\n      serverID: image.server,\n      secret: image.secret,\n      title: image.title,\n      key: image.id,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 15\n      },\n      __self: this\n    }));\n    photos = photosMap;\n  } //Determine if photos exist. If not, will return value '0'\n\n\n  let photosExist = photos.length; //If photos exist, load header text for query, else header will produce 'loading...'\n  //If photos exist, render the photos, else render Not Found component\n\n  return React.createElement(\"div\", {\n    className: \"photo-container\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 24\n    },\n    __self: this\n  }, React.createElement(\"h2\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 25\n    },\n    __self: this\n  }, photosExist ? search : 'Loading...'), React.createElement(\"ul\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 26\n    },\n    __self: this\n  }, photosExist ? photos : React.createElement(NotFound, {\n    query: search,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 27\n    },\n    __self: this\n  })));\n};\n\nexport default PhotoContainer;","map":{"version":3,"sources":["/Users/joseph/Documents/GitHub/React-Gallery/src/components/PhotoContainer.js"],"names":["React","Photo","NotFound","useParams","PhotoContainer","data","search","dataObject","photos","photosMap","map","image","id","farm","server","secret","title","photosExist","length"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,KAAP,MAAkB,SAAlB;AACA,OAAOC,QAAP,MAAqB,YAArB;AACA,SAAQC,SAAR,QAAwB,kBAAxB;;AAEA,MAAMC,cAAc,GAAG,CAAC;AAACC,EAAAA;AAAD,CAAD,KAAY;AAE/B;AACA,MAAI;AAACC,IAAAA;AAAD,MAAWH,SAAS,EAAxB;AACA,MAAII,UAAU,GAAGF,IAAI,CAAE,GAAEC,MAAO,EAAX,CAArB,CAJ+B,CAM/B;;AACA,MAAIE,MAAM,GAAC,EAAX;;AACA,MAAGD,UAAH,EAAe;AACX,QAAIE,SAAS,GAAGF,UAAU,CAACG,GAAX,CAAeC,KAAK,IAAI,oBAAC,KAAD;AAAO,MAAA,EAAE,EAAEA,KAAK,CAACC,EAAjB;AAAqB,MAAA,MAAM,EAAED,KAAK,CAACE,IAAnC;AAAyC,MAAA,QAAQ,EAAEF,KAAK,CAACG,MAAzD;AAAiE,MAAA,MAAM,EAAEH,KAAK,CAACI,MAA/E;AAAuF,MAAA,KAAK,EAAEJ,KAAK,CAACK,KAApG;AAA2G,MAAA,GAAG,EAAEL,KAAK,CAACC,EAAtH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAAxB,CAAhB;AACAJ,IAAAA,MAAM,GAAGC,SAAT;AACH,GAX8B,CAY/B;;;AACA,MAAIQ,WAAW,GAAGT,MAAM,CAACU,MAAzB,CAb+B,CAe/B;AACA;;AACA,SACI;AAAK,IAAA,SAAS,EAAC,iBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACQ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAKD,WAAW,GAAGX,MAAH,GAAY,YAA5B,CADR,EAEQ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACKW,WAAW,GAAGT,MAAH,GAAY,oBAAC,QAAD;AAAU,IAAA,KAAK,EAAEF,MAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAD5B,CAFR,CADJ;AAQH,CAzBD;;AA2BA,eAAeF,cAAf","sourcesContent":["import React from 'react';\nimport Photo from './Photo';\nimport NotFound from './NotFound';\nimport {useParams} from 'react-router-dom';\n\nconst PhotoContainer = ({data}) => {\n\n    //Take search parameters from the URL and pass string into the data object to return queried object\n    let {search} = useParams();\n    let dataObject = data[`${search}`]\n    \n    //Declare photos variable. .map() over the object and return photo components for each image in object.\n    let photos='';\n    if(dataObject) {\n        let photosMap = dataObject.map(image => <Photo id={image.id} farmID={image.farm} serverID={image.server} secret={image.secret} title={image.title} key={image.id}/>)\n        photos = photosMap;\n    } \n    //Determine if photos exist. If not, will return value '0'\n    let photosExist = photos.length;\n     \n    //If photos exist, load header text for query, else header will produce 'loading...'\n    //If photos exist, render the photos, else render Not Found component\n    return (\n        <div className=\"photo-container\">\n                <h2>{photosExist ? search : 'Loading...'}</h2>\n                <ul>\n                    {photosExist ? photos : <NotFound query={search}/>}\n                </ul>\n        </div>\n    );\n};\n\nexport default PhotoContainer;\n"]},"metadata":{},"sourceType":"module"}