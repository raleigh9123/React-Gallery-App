{"ast":null,"code":"var _jsxFileName = \"/Users/joseph/Documents/GitHub/React-Gallery/src/App.js\";\n//Project Dependencies\nimport React, { Component } from 'react';\nimport './App.css';\nimport { Route, Redirect, Switch } from 'react-router-dom';\nimport axios from 'axios'; //App Components\n\nimport SearchForm from './components/SearchForm';\nimport Nav from './components/Nav';\nimport PhotoContainer from './components/PhotoContainer'; //Flickr API\n\nimport apiKey from './config';\n\nclass App extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      images: {\n        beach: [],\n        mountain: [],\n        desert: []\n      }\n    };\n\n    this.requestFlickrURLs = query => {\n      axios.get(`https://www.flickr.com/services/rest/?method=flickr.photos.search&api_key=${apiKey}&tags=${query}&per_page=24&format=json&nojsoncallback=1&sort=relevance`).then(response => {\n        //Make sure Flickr returns a real response\n        if (typeof response.data === 'object') {\n          this.setState(prevState => {\n            return {\n              images: { ...prevState.images,\n                [query]: response.data.photos.photo\n              }\n            };\n          });\n        }\n      }).catch(function (error) {\n        // handle error\n        console.log(error);\n      });\n    };\n  }\n\n  //When App component mounts, request data for 3 presets\n  componentDidMount() {\n    this.requestFlickrURLs('beach');\n    this.requestFlickrURLs('mountain');\n    this.requestFlickrURLs('desert'); //If not on the homepage already, take the url parameter and make Flickr request\n\n    let currentURLQuery = this.props.location.pathname.slice(1);\n\n    if (currentURLQuery) {\n      this.requestFlickrURLs(currentURLQuery);\n    }\n  } //Use Axios to get image data for the query. Query comes from URL or from user search\n\n\n  render() {\n    return React.createElement(\"div\", {\n      className: \"container\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 70\n      },\n      __self: this\n    }, React.createElement(Route, {\n      path: \"/\",\n      render: props => React.createElement(SearchForm, Object.assign({}, props, {\n        onSearch: this.requestFlickrURLs,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 77\n        },\n        __self: this\n      })),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 77\n      },\n      __self: this\n    }), React.createElement(Route, {\n      path: \"/\",\n      component: Nav,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 78\n      },\n      __self: this\n    }), React.createElement(Switch, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 79\n      },\n      __self: this\n    }, React.createElement(Route, {\n      exact: true,\n      path: \"/\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 80\n      },\n      __self: this\n    }, React.createElement(Redirect, {\n      to: \"/beach\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 81\n      },\n      __self: this\n    })), React.createElement(Route, {\n      path: \"/:search\",\n      render: () => React.createElement(PhotoContainer, {\n        data: this.state.images,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 83\n        },\n        __self: this\n      }),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 83\n      },\n      __self: this\n    })));\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["/Users/joseph/Documents/GitHub/React-Gallery/src/App.js"],"names":["React","Component","Route","Redirect","Switch","axios","SearchForm","Nav","PhotoContainer","apiKey","App","state","images","beach","mountain","desert","requestFlickrURLs","query","get","then","response","data","setState","prevState","photos","photo","catch","error","console","log","componentDidMount","currentURLQuery","props","location","pathname","slice","render"],"mappings":"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","sourcesContent":["//Project Dependencies\nimport React, {Component} from 'react';\nimport './App.css';\nimport {\n  Route,\n  Redirect,\n  Switch\n} from 'react-router-dom';\nimport axios from 'axios';\n\n\n//App Components\nimport SearchForm from './components/SearchForm';\nimport Nav from './components/Nav';\nimport PhotoContainer from './components/PhotoContainer';\n\n//Flickr API\nimport apiKey from './config';\n\n\nclass App extends Component {\n\n  //State is declared with image objects as empty arrays\n  state = {\n    images: {\n      beach:[],\n      mountain:[],\n      desert:[]\n    },\n  }\n\n  //When App component mounts, request data for 3 presets\n  componentDidMount() {\n    this.requestFlickrURLs('beach');\n    this.requestFlickrURLs('mountain');\n    this.requestFlickrURLs('desert');\n\n    //If not on the homepage already, take the url parameter and make Flickr request\n    let currentURLQuery = this.props.location.pathname.slice(1);\n    if(currentURLQuery) {\n      this.requestFlickrURLs(currentURLQuery)\n    }    \n  }\n\n  //Use Axios to get image data for the query. Query comes from URL or from user search\n  requestFlickrURLs = (query) => {\n    axios.get(`https://www.flickr.com/services/rest/?method=flickr.photos.search&api_key=${apiKey}&tags=${query}&per_page=24&format=json&nojsoncallback=1&sort=relevance`)\n      .then( response => {\n        //Make sure Flickr returns a real response\n        if(typeof response.data === 'object') {\n          this.setState(prevState => {\n            return {\n              images: {\n                ...prevState.images,\n                [query]: response.data.photos.photo\n              },\n            }\n          })\n        }\n    })\n      .catch(function (error) {\n        // handle error\n        console.log(error);\n    });\n  }\n\n  render() {\n    \n    return (\n        <div className=\"container\">\n\n          {/* * *\n          * Entire App is wrapped in Browser Router in the index.js main file.\n          * Load search form passing flickr request function in as props. Load nav component. \n          * When app loads or if url path is blank, redirect to \"/beaches\". Otherwise, redirect to custom search query  \n          * * */}\n          <Route path=\"/\" render={(props) => <SearchForm {...props} onSearch={this.requestFlickrURLs} />} />\n          <Route path=\"/\" component={Nav} />\n          <Switch>\n            <Route exact path =\"/\">\n              <Redirect to=\"/beach\" />\n            </Route>\n            <Route path=\"/:search\" render={ () => <PhotoContainer data={this.state.images} /> } />\n          </Switch>\n\n        </div>\n    );\n  }\n}\n\nexport default App;"]},"metadata":{},"sourceType":"module"}